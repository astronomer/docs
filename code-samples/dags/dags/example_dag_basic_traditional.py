import json
from pendulum import datetime

from airflow import DAG
from airflow.operators.python import PythonOperator

with DAG(
    "example_dag_basic",
    schedule="@daily",
    start_date=datetime(2023, 1, 1),
    catchup=False,
    default_args={"retries": 2},
    tags=["example"],
    # Render templates using Jinja NativeEnvironment
    render_template_as_native_obj=True,
):
    """
    ### Basic ETL Dag
    This is a simple ETL data pipeline example that uses the traditional
    PythonOperator instead of TaskFlowAPI decorators to accomplish the same
    simple extract, transform and load steps as the example_dag_basic
    generated by the Astro CLI.
    For more information on the PythonOperator, reference the registry here:
    https://registry.astronomer.io/providers/apache-airflow/modules/pythonoperator
    """

    def extract_function():
        """
        #### Extract task
        A simple "extract" task to get data ready for the rest of the
        pipeline. In this case, getting data is simulated by reading from a
        hardcoded JSON string.
        """
        data_string = '{"1001": 301.27, "1002": 433.21, "1003": 502.22}'

        order_data_dict = json.loads(data_string)
        return order_data_dict

    extract_task = PythonOperator(task_id="extract", python_callable=extract_function)

    def transform_function(order_data_dict: dict):
        """
        #### Transform task
        A simple "transform" task which takes in the collection of order data
        and computes the total order value.
        """
        total_order_value = 0

        for value in order_data_dict.values():
            total_order_value += value

        return {"total_order_value": total_order_value}

    transform_task = PythonOperator(
        task_id="transform",
        python_callable=transform_function,
        op_kwargs={
            "order_data_dict": "{{ ti.xcom_pull(task_ids='extract', \
                key='return_value') }}"
        },
    )

    def load_function(total_order_value: float):
        """
        #### Load task
        A simple "load" task that takes in the result of the "transform" task
        and prints it out, instead of saving it to end user review.
        """

        print(f"Total order value is: {total_order_value:.2f}")

    load_task = PythonOperator(
        task_id="load",
        python_callable=load_function,
        op_kwargs={
            "total_order_value": "{{ ti.xcom_pull(task_ids='transform', \
                key='return_value')['total_order_value'] }}"
        },
    )

    # Define task dependencies
    extract_task >> transform_task >> load_task
