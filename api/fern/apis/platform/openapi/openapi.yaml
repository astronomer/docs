components:
  schemas:
    BasicSubjectProfile:
      properties:
        apiTokenName:
          description: The API token's name. Returned only when `SubjectType` is `SERVICEKEY`.
          example: my-token
          type: string
        avatarUrl:
          description: The URL for the user's profile image. Returned only when `SubjectType`
            is `USER`.
          example: https://avatar.url
          type: string
        fullName:
          description: The subject's full name. Returned only when `SubjectType` is
            `USER`.
          example: Jane Doe
          type: string
        id:
          description: The subject's ID.
          example: clm8qv74h000008mlf08scq7k
          type: string
        subjectType:
          description: The subject type.
          enum:
          - USER
          - SERVICEKEY
          example: USER
          type: string
        username:
          description: The subject's username. Returned only when `SubjectType` is
            `USER`.
          example: user1@company.com
          type: string
      required:
      - id
      type: object
    Cluster:
      properties:
        cloudProvider:
          description: The name of the cluster's cloud provider.
          enum:
          - AWS
          - AZURE
          - GCP
          example: AWS
          type: string
        createdAt:
          description: The time when the cluster was created in UTC. formatted as
            `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        dbInstanceType:
          description: The type of database instance that is used for the cluster.
          example: db.t3.medium
          type: string
        id:
          description: The cluster's ID.
          example: clm7k8tgw000008jz97i37y81
          type: string
        isLimited:
          description: Whether the cluster is limited.
          example: false
          type: boolean
        metadata:
          $ref: '#/components/schemas/ClusterMetadata'
        name:
          description: The cluster's name.
          example: my cluster
          type: string
        nodePools:
          description: The list of node pools that are created in the cluster.
          items:
            $ref: '#/components/schemas/NodePool'
          type: array
        organizationId:
          description: The ID of the Organization that the cluster belongs to.
          example: clm88r8hi000008jwhzxu5crg
          type: string
        podSubnetRange:
          description: The subnet range for Pods. For GCP clusters only.
          example: 172.21.0.0/19
          type: string
        providerAccount:
          description: The provider account ID. For GCP clusters only.
          example: provider-account
          type: string
        region:
          description: The region in which the cluster is created.
          example: us-east-1
          type: string
        servicePeeringRange:
          description: The service peering range. For GCP clusters only.
          example: 172.23.0.0/20
          type: string
        serviceSubnetRange:
          description: The service subnet range. For GCP clusters only.
          example: 172.22.0.0/22
          type: string
        status:
          description: The status of the cluster.
          enum:
          - CREATING
          - CREATED
          - CREATE_FAILED
          - UPDATE_FAILED
          - UPDATING
          example: CREATED
          type: string
        tags:
          description: The Kubernetes tags in the cluster. For AWS Hybrid clusters
            only.
          items:
            $ref: '#/components/schemas/ClusterK8sTag'
          type: array
        tenantId:
          description: The tenant ID. For Azure clusters only.
          example: your-tenant-id
          type: string
        type:
          description: The type of the cluster.
          enum:
          - DEDICATED
          - HYBRID
          example: DEDICATED
          type: string
        updatedAt:
          description: The time when the cluster was last updated in UTC. formatted
            as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        vpcSubnetRange:
          description: The VPC subnet range.
          example: 172.20.0.0/22
          type: string
        workspaceIds:
          description: The list of Workspaces that are authorized to the cluster.
          example:
          - clm88rddl000108jwgeka2div
          items:
            type: string
          type: array
      required:
      - cloudProvider
      - createdAt
      - dbInstanceType
      - id
      - name
      - organizationId
      - region
      - status
      - type
      - updatedAt
      - vpcSubnetRange
      type: object
    ClusterK8sTag:
      properties:
        key:
          description: The tag's key.
          example: key1
          type: string
        value:
          description: The tag's value.
          example: value1
          type: string
      type: object
    ClusterMetadata:
      properties:
        externalIPs:
          description: External IPs of the cluster.
          example:
          - 35.100.100.1
          items:
            type: string
          type: array
        oidcIssuerUrl:
          description: OIDC issuer URL for the cluster
          example: https://westus2.oic.prod-aks.azure.com/b84efac8-cfae-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/
          type: string
      type: object
    ClusterOptions:
      properties:
        databaseInstances:
          description: The available database instances.
          items:
            $ref: '#/components/schemas/ProviderInstanceType'
          type: array
        defaultDatabaseInstance:
          $ref: '#/components/schemas/ProviderInstanceType'
        defaultNodeInstance:
          $ref: '#/components/schemas/ProviderInstanceType'
        defaultPodSubnetRange:
          description: The default pod subnet range.
          example: 172.21.0.0/19
          type: string
        defaultRegion:
          $ref: '#/components/schemas/ProviderRegion'
        defaultServicePeeringRange:
          description: The default service peering range.
          example: 172.23.0.0/20
          type: string
        defaultServiceSubnetRange:
          description: The default service subnet range.
          example: 172.22.0.0/22
          type: string
        defaultVpcSubnetRange:
          description: The default VPC subnet range.
          example: 172.20.0.0/19
          type: string
        nodeCountDefault:
          description: The default number of nodes.
          example: 20
          type: integer
        nodeCountMax:
          description: The maximum number of nodes.
          example: 100
          type: integer
        nodeCountMin:
          description: The minimum number of nodes.
          example: 2
          type: integer
        nodeInstances:
          description: The available node instances.
          items:
            $ref: '#/components/schemas/ProviderInstanceType'
          type: array
        provider:
          description: The cloud provider.
          enum:
          - AWS
          - AZURE
          - GCP
          example: AZURE
          type: string
        regions:
          description: The available regions.
          items:
            $ref: '#/components/schemas/ProviderRegion'
          type: array
      required:
      - databaseInstances
      - defaultDatabaseInstance
      - defaultNodeInstance
      - defaultRegion
      - defaultVpcSubnetRange
      - nodeCountDefault
      - nodeCountMax
      - nodeCountMin
      - nodeInstances
      - provider
      - regions
      type: object
    ClustersPaginated:
      properties:
        clusters:
          description: The list of clusters in the current page.
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
        limit:
          description: The maximum number of clusters in one page.
          example: 10
          type: integer
        offset:
          description: The offset of the current page of clusters.
          example: 0
          type: integer
        totalCount:
          description: The total number of clusters.
          example: 100
          type: integer
      required:
      - clusters
      - limit
      - offset
      - totalCount
      type: object
    CreateAwsClusterRequest:
      properties:
        cloudProvider:
          description: The cluster's cloud provider.
          enum:
          - AWS
          - AZURE
          - GCP
          example: AZURE
          type: string
        dbInstanceType:
          description: The type of database instance that is used for the cluster.
            Required for Hybrid clusters.
          example: Small General Purpose
          type: string
        k8sTags:
          description: The Kubernetes tags in the cluster.
          items:
            $ref: '#/components/schemas/ClusterK8sTag'
          type: array
        name:
          description: The cluster's name.
          example: My cluster
          type: string
        nodePools:
          description: The list of node pools to create in the cluster.
          items:
            $ref: '#/components/schemas/CreateNodePoolRequest'
          type: array
        providerAccount:
          description: The provider account ID. Required for Hybrid clusters.
          example: provider-account
          type: string
        region:
          description: The cluster's region.
          example: us-east-1
          type: string
        type:
          description: The cluster's type.
          enum:
          - DEDICATED
          - HYBRID
          example: DEDICATED
          type: string
        vpcSubnetRange:
          description: The VPC subnet range.
          example: 172.20.0.0/22
          type: string
        workspaceIds:
          description: The list of Workspaces that are authorized to the cluster.
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - cloudProvider
      - name
      - region
      - type
      - vpcSubnetRange
      type: object
    CreateAzureClusterRequest:
      properties:
        cloudProvider:
          description: The cluster's cloud provider.
          enum:
          - AWS
          - AZURE
          - GCP
          example: AZURE
          type: string
        dbInstanceType:
          description: The type of database instance that is used for the cluster.
            Required for Hybrid clusters.
          example: Small General Purpose
          type: string
        k8sTags:
          description: The Kubernetes tags in the cluster.
          items:
            $ref: '#/components/schemas/ClusterK8sTag'
          type: array
        name:
          description: The cluster's name.
          example: My cluster
          type: string
        nodePools:
          description: The list of node pools to create in the cluster.
          items:
            $ref: '#/components/schemas/CreateNodePoolRequest'
          type: array
        providerAccount:
          description: The provider account ID. Required for Hybrid clusters.
          example: provider-account
          type: string
        region:
          description: The cluster's region.
          example: us-east-1
          type: string
        tenantId:
          description: The tenant ID. For Azure clusters only.
          example: 82ab587e-33f8-47a2-8909-b9269551d45c
          type: string
        type:
          description: The cluster's type.
          enum:
          - DEDICATED
          - HYBRID
          example: DEDICATED
          type: string
        vpcSubnetRange:
          description: The VPC subnet range.
          example: 172.20.0.0/22
          type: string
        workspaceIds:
          description: The list of Workspaces that are authorized to the cluster.
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - cloudProvider
      - name
      - region
      - type
      - vpcSubnetRange
      type: object
    CreateClusterRequest:
      oneOf:
      - $ref: '#/components/schemas/CreateAwsClusterRequest'
      - $ref: '#/components/schemas/CreateAzureClusterRequest'
      - $ref: '#/components/schemas/CreateGcpClusterRequest'
      type: object
    CreateDedicatedDeploymentRequest:
      properties:
        astroRuntimeVersion:
          description: Deployment's Astro Runtime version.
          example: 9.1.0
          type: string
        clusterId:
          description: The ID of the cluster where the Deployment will be created.
          example: clmh9g6zj000008mg77if5wa2
          type: string
        contactEmails:
          description: A list of contact emails for the Deployment.
          example:
          - user1@company.com
          items:
            type: string
          type: array
        defaultTaskPodCpu:
          description: The default CPU resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in number
            of CPU cores.
          example: "0.5"
          type: string
        defaultTaskPodMemory:
          description: The default memory resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in `Gi` and
            must be explicitly included. This value must always be twice the value
            of `DefaultTaskPodCpu`.
          example: 1Gi
          type: string
        description:
          description: The Deployment's description.
          example: My deployment description
          maxLength: 1000
          type: string
        environmentVariables:
          description: List of environment variables to add to the Deployment.
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariableRequest'
          type: array
        executor:
          description: The Deployment's executor type.
          enum:
          - CELERY
          - KUBERNETES
          example: CELERY
          type: string
        isCicdEnforced:
          description: Whether the Deployment requires that all deploys are made through
            CI/CD.
          example: true
          type: boolean
        isDagDeployEnabled:
          description: Whether the Deployment has DAG deploys enabled.
          example: true
          type: boolean
        isDevelopmentMode:
          description: If true, deployment will be able to use development-only features,
            such as hibernation, but will not have guaranteed uptime SLAs
          type: boolean
        isHighAvailability:
          description: Whether the Deployment is configured for high availability.
            If `true`, multiple scheduler pods will be online.
          example: true
          type: boolean
        name:
          description: The Deployment's name.
          example: My deployment
          maxLength: 500
          type: string
        resourceQuotaCpu:
          description: The CPU quota for worker Pods when running the Kubernetes executor
            or KubernetesPodOperator. If current CPU usage across all workers exceeds
            the quota, no new worker Pods can be scheduled. Units are in number of
            CPU cores.
          example: "160"
          type: string
        resourceQuotaMemory:
          description: The memory quota for worker Pods when running the Kubernetes
            executor or KubernetesPodOperator. If current memory usage across all
            workers exceeds the quota, no new worker Pods can be scheduled. Units
            are in `Gi` and must be explicitly included. This value must always be
            twice the value of `ResourceQuotaCpu`.
          example: 320Gi
          type: string
        scalingSpec:
          $ref: '#/components/schemas/DeploymentScalingSpecRequest'
        schedulerSize:
          description: The size of the scheduler pod.
          enum:
          - SMALL
          - MEDIUM
          - LARGE
          example: MEDIUM
          type: string
        type:
          description: The type of the Deployment.
          enum:
          - DEDICATED
          - HYBRID
          - STANDARD
          example: DEDICATED
          type: string
        workerQueues:
          description: The list of worker queues configured for the Deployment. Applies
            only when `Executor` is `CELERY`. At least 1 worker queue is needed. All
            Deployments need at least 1 worker queue called `default`.
          items:
            $ref: '#/components/schemas/WorkerQueueRequest'
          minItems: 1
          type: array
        workloadIdentity:
          description: The Deployment's workload identity.
          example: arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0
          type: string
        workspaceId:
          description: The ID of the workspace to which the Deployment belongs.
          example: clmh8ol3x000008jo656y4285
          type: string
      required:
      - astroRuntimeVersion
      - clusterId
      - defaultTaskPodCpu
      - defaultTaskPodMemory
      - executor
      - isCicdEnforced
      - isDagDeployEnabled
      - isHighAvailability
      - name
      - resourceQuotaCpu
      - resourceQuotaMemory
      - schedulerSize
      - type
      - workspaceId
      type: object
    CreateDeployRequest:
      properties:
        description:
          description: The Deploy's description.
          example: My deploy description
          maxLength: 500
          type: string
        type:
          description: The type of the Deploy.
          enum:
          - IMAGE_AND_DAG
          - IMAGE_ONLY
          - DAG_ONLY
          example: IMAGE_AND_DAG
          type: string
      required:
      - type
      type: object
    CreateDeploymentRequest:
      oneOf:
      - $ref: '#/components/schemas/CreateDedicatedDeploymentRequest'
      - $ref: '#/components/schemas/CreateHybridDeploymentRequest'
      - $ref: '#/components/schemas/CreateStandardDeploymentRequest'
      type: object
    CreateGcpClusterRequest:
      properties:
        cloudProvider:
          description: The cluster's cloud provider.
          enum:
          - AWS
          - AZURE
          - GCP
          example: AZURE
          type: string
        dbInstanceType:
          description: The type of database instance that is used for the cluster.
            Required for Hybrid clusters.
          example: Small General Purpose
          type: string
        k8sTags:
          description: The Kubernetes tags in the cluster.
          items:
            $ref: '#/components/schemas/ClusterK8sTag'
          type: array
        name:
          description: The cluster's name.
          example: My cluster
          type: string
        nodePools:
          description: The list of node pools to create in the cluster.
          items:
            $ref: '#/components/schemas/CreateNodePoolRequest'
          type: array
        podSubnetRange:
          description: The subnet range for Pods. For GCP clusters only.
          example: 172.21.0.0/19
          type: string
        providerAccount:
          description: The provider account ID. Required for Hybrid clusters.
          example: provider-account
          type: string
        region:
          description: The cluster's region.
          example: us-east-1
          type: string
        servicePeeringRange:
          description: The service subnet range. For GCP clusters only.
          example: 172.23.0.0/20
          type: string
        serviceSubnetRange:
          description: The service peering range. For GCP clusters only.
          example: 172.22.0.0/22
          type: string
        type:
          description: The cluster's type.
          enum:
          - DEDICATED
          - HYBRID
          example: DEDICATED
          type: string
        vpcSubnetRange:
          description: The VPC subnet range.
          example: 172.20.0.0/22
          type: string
        workspaceIds:
          description: The list of Workspaces that are authorized to the cluster.
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - cloudProvider
      - name
      - podSubnetRange
      - region
      - servicePeeringRange
      - serviceSubnetRange
      - type
      - vpcSubnetRange
      type: object
    CreateHybridDeploymentRequest:
      properties:
        astroRuntimeVersion:
          description: Deployment's Astro Runtime version.
          example: 9.1.0
          type: string
        clusterId:
          description: The ID of the cluster where the Deployment will be created.
          example: clmh9grqp000108mg4r2l5ok4
          type: string
        contactEmails:
          description: A list of contact emails for the Deployment.
          example:
          - user1@company.com
          items:
            type: string
          type: array
        description:
          description: The Deployment's description.
          example: My deployment description
          maxLength: 1000
          type: string
        environmentVariables:
          description: List of environment variables to add to the Deployment.
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariableRequest'
          type: array
        executor:
          description: The Deployment's executor type.
          enum:
          - CELERY
          - KUBERNETES
          example: CELERY
          type: string
        isCicdEnforced:
          description: Whether the Deployment requires that all deploys are made through
            CI/CD.
          example: true
          type: boolean
        isDagDeployEnabled:
          description: Whether the Deployment has DAG deploys enabled.
          example: true
          type: boolean
        name:
          description: The Deployment's name.
          example: My deployment
          maxLength: 500
          type: string
        scheduler:
          $ref: '#/components/schemas/DeploymentInstanceSpecRequest'
        taskPodNodePoolId:
          description: The node pool ID for the task pods. For `KUBERNETES` executor
            only.
          example: clmh9hbjb000008m9eutqg68h
          type: string
        type:
          description: The type of the Deployment.
          enum:
          - DEDICATED
          - HYBRID
          - STANDARD
          example: DEDICATED
          type: string
        workerQueues:
          description: The list of worker queues configured for the Deployment. Applies
            only when `Executor` is `CELERY`. At least 1 worker queue is needed. All
            Deployments need at least 1 worker queue called `default`.
          items:
            $ref: '#/components/schemas/HybridWorkerQueueRequest'
          minItems: 1
          type: array
        workloadIdentity:
          description: The Deployment's workload identity.
          example: arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0
          type: string
        workspaceId:
          description: The ID of the workspace to which the Deployment belongs.
          example: clmh8ol3x000008jo656y4285
          type: string
      required:
      - astroRuntimeVersion
      - clusterId
      - executor
      - isCicdEnforced
      - isDagDeployEnabled
      - name
      - scheduler
      - type
      - workspaceId
      type: object
    CreateNodePoolRequest:
      properties:
        isDefault:
          description: Whether the node pool is the default node pool of the cluster.
          example: true
          type: boolean
        maxNodeCount:
          description: The maximum number of nodes that can be created in the node
            pool.
          example: 10
          type: integer
        name:
          description: The name of the node pool.
          example: my-nodepool
          type: string
        nodeInstanceType:
          description: The type of node instance that is used for the node pool.
          example: t3.medium
          type: string
      required:
      - maxNodeCount
      - name
      - nodeInstanceType
      type: object
    CreateStandardDeploymentRequest:
      properties:
        astroRuntimeVersion:
          description: Deployment's Astro Runtime version.
          example: 9.1.0
          type: string
        cloudProvider:
          description: The cloud provider for the Deployment's cluster. Optional if
            `ClusterId` is specified.
          enum:
          - AWS
          - AZURE
          - GCP
          example: GCP
          type: string
        clusterId:
          description: The ID of the cluster to which the Deployment will be created
            in. Optional if cloud provider and region is specified.
          example: clmh93n2n000008ms3tv79voh
          type: string
        contactEmails:
          description: A list of contact emails for the Deployment.
          example:
          - user1@company.com
          items:
            type: string
          type: array
        defaultTaskPodCpu:
          description: The default CPU resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in number
            of CPU cores.
          example: "0.5"
          type: string
        defaultTaskPodMemory:
          description: The default memory resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in `Gi` and
            must be explicitly included. This value must always be twice the value
            of `DefaultTaskPodCpu`.
          example: 1Gi
          type: string
        description:
          description: The Deployment's description.
          example: My deployment description
          maxLength: 1000
          type: string
        environmentVariables:
          description: List of environment variables to add to the Deployment.
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariableRequest'
          type: array
        executor:
          description: The Deployment's executor type.
          enum:
          - CELERY
          - KUBERNETES
          example: CELERY
          type: string
        isCicdEnforced:
          description: Whether the Deployment requires that all deploys are made through
            CI/CD.
          example: true
          type: boolean
        isDagDeployEnabled:
          description: Whether the Deployment has DAG deploys enabled.
          example: true
          type: boolean
        isDevelopmentMode:
          description: If true, deployment will be able to use development-only features,
            such as hibernation, but will not have guaranteed uptime SLAs
          type: boolean
        isHighAvailability:
          description: Whether the Deployment is configured for high availability.
            If `true`, multiple scheduler pods will be online.
          example: true
          type: boolean
        name:
          description: The Deployment's name.
          example: My deployment
          maxLength: 500
          type: string
        region:
          description: The region to host the Deployment in. Optional if `ClusterId`
            is specified.
          example: us-east4
          type: string
        resourceQuotaCpu:
          description: The CPU quota for worker Pods when running the Kubernetes executor
            or KubernetesPodOperator. If current CPU usage across all workers exceeds
            the quota, no new worker Pods can be scheduled. Units are in number of
            CPU cores.
          example: "160"
          type: string
        resourceQuotaMemory:
          description: The memory quota for worker Pods when running the Kubernetes
            executor or KubernetesPodOperator. If current memory usage across all
            workers exceeds the quota, no new worker Pods can be scheduled. Units
            are in `Gi` and must be explicitly included. This value must always be
            twice the value of `ResourceQuotaCpu`.
          example: 320Gi
          type: string
        scalingSpec:
          $ref: '#/components/schemas/DeploymentScalingSpecRequest'
        schedulerSize:
          description: The size of the scheduler pod.
          enum:
          - SMALL
          - MEDIUM
          - LARGE
          example: MEDIUM
          type: string
        type:
          description: The type of the Deployment.
          enum:
          - DEDICATED
          - HYBRID
          - STANDARD
          example: DEDICATED
          type: string
        workerQueues:
          description: The list of worker queues configured for the Deployment. Applies
            only when `Executor` is `CELERY`. At least 1 worker queue is needed. All
            Deployments need at least 1 worker queue called `default`.
          items:
            $ref: '#/components/schemas/WorkerQueueRequest'
          minItems: 1
          type: array
        workloadIdentity:
          description: The Deployment's workload identity.
          example: arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0
          type: string
        workspaceId:
          description: The ID of the workspace to which the Deployment belongs.
          example: clmh8ol3x000008jo656y4285
          type: string
      required:
      - astroRuntimeVersion
      - defaultTaskPodCpu
      - defaultTaskPodMemory
      - executor
      - isCicdEnforced
      - isDagDeployEnabled
      - isHighAvailability
      - name
      - resourceQuotaCpu
      - resourceQuotaMemory
      - schedulerSize
      - type
      - workspaceId
      type: object
    CreateWorkspaceRequest:
      properties:
        cicdEnforcedDefault:
          description: Whether new Deployments enforce CI/CD deploys by default.
          example: true
          type: boolean
        description:
          description: The Workspace's description.
          example: This is a test workspace
          type: string
        name:
          description: The Workspace's name.
          example: My Workspace
          maxLength: 50
          type: string
      required:
      - name
      type: object
    Deploy:
      properties:
        airflowVersion:
          description: The Deploy's Airflow version.
          example: 2.7.2, if airflow version is not found, it will return NA
          type: string
        astroRuntimeVersion:
          description: The Deploy's Astro Runtime version.
          example: 9.1.0
          type: string
        createdAt:
          description: The time when the Deploy was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        createdBySubject:
          $ref: '#/components/schemas/BasicSubjectProfile'
        dagTarballVersion:
          description: The Deploy's DAG tarball version, also known as the Bundle
            Version in the Astro UI.
          example: "2024-01-12T18:32:20.5898930Z"
          type: string
        dagsUploadUrl:
          description: The Deploy's upload URL to upload DAG bundles. Appears only
            if dag deploy is enabled on the Deployment.
          example: https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv
          type: string
        deploymentId:
          description: The Deployment's ID.
          example: clmh57jtm000008lb58fe2wmv
          type: string
        description:
          description: The Deploy's description.
          example: My deploy description
          type: string
        id:
          description: The Deploy's ID.
          example: clvetru2w000201mowqwua63n
          type: string
        imageRepository:
          description: The URL of the Deploy's image repository.
          example: https://my-image-repository
          type: string
        imageTag:
          description: The Deploy's image tag. Appears only if specified in the most
            recent deploy.
          example: my-image-tag
          type: string
        isDagDeployEnabled:
          description: Whether the Deploy has DAG deploys enabled.
          example: true
          type: boolean
        rollbackFromId:
          description: The Deploy's ID which was Rollback from. Appears only if a
            rollback as been performed.
          example: clvcz1lrq000101oitxtp276e
          type: string
        status:
          description: The status of the Deploy.
          enum:
          - INITIALIZED
          - DEPLOYED
          - FAILED
          example: DEPLOYED
          type: string
        type:
          description: The type of Deploy.
          enum:
          - IMAGE_AND_DAG
          - IMAGE_ONLY
          - DAG_ONLY
          example: IMAGE_AND_DAG
          type: string
        updatedAt:
          description: The time when the Deploy was last updated in UTC, formatted
            as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        updatedBySubject:
          $ref: '#/components/schemas/BasicSubjectProfile'
      required:
      - createdAt
      - deploymentId
      - id
      - imageRepository
      - imageTag
      - isDagDeployEnabled
      - status
      - type
      type: object
    DeployRollbackRequest:
      properties:
        description:
          maxLength: 500
          type: string
      type: object
    Deployment:
      properties:
        airflowVersion:
          description: The Deployment's Airflow version.
          example: 2.7.2, if airflow version is not found, it will return NA
          type: string
        astroRuntimeVersion:
          description: The Deployment's Astro Runtime version.
          example: 9.1.0
          type: string
        cloudProvider:
          description: The cloud provider of the cluster. Only for Standard Deployment.
          enum:
          - AWS
          - AZURE
          - GCP
          example: AZURE
          type: string
        clusterId:
          description: The ID of the cluster where the Deployment is hosted.
          example: clmh597sg000208lb2kjhcn8q
          type: string
        clusterName:
          description: The name of the cluster where the Deployment is hosted. Only
            for Dedicated and Hybrid Deployments.
          example: my cluster
          type: string
        contactEmails:
          description: The list of contact emails for the Deployment.
          example:
          - user1@company.com
          items:
            type: string
          type: array
        createdAt:
          description: The time when the Deployment was created in UTC, formatted
            as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        createdBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        dagTarballVersion:
          description: The Deployment's current DAG tarball version, also known as
            the Bundle Version in the Astro UI. If no deploys are currently processing,
            this value should be the same as DesiredDagTarballVersion.
          example: "2024-01-12T18:32:20.5898930Z"
          type: string
        defaultTaskPodCpu:
          description: The default CPU resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in number
            of CPU cores.
          example: "0.5"
          type: string
        defaultTaskPodMemory:
          description: The default memory resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This
            value must always be twice the value of `DefaultTaskPodCpu`.
          example: 1Gi
          type: string
        description:
          description: The Deployment's description.
          example: My deployment description
          type: string
        desiredDagTarballVersion:
          description: The Deployment's expected DAG tarball version after a currently
            processing deploy completes. This value is updated when a user triggers
            a DAG-only deploy to indicate that the Deployment is expecting a new DAG
            tarball version. If no deploys are currently processing, this value should
            be the same as DagTarballVersion.
          example: "2024-01-12T18:32:20.5898930Z"
          type: string
        environmentVariables:
          description: The Deployment's environment variables. Secret values will
            be omitted from response.
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariable'
          type: array
        executor:
          description: The Deployment's executor type.
          enum:
          - CELERY
          - KUBERNETES
          example: CELERY
          type: string
        externalIPs:
          description: A list of the Deployment's external IPs.
          example:
          - 0.0.0.0
          items:
            type: string
          type: array
        id:
          description: The Deployment's ID.
          example: clmh57jtm000008lb58fe2wmv
          type: string
        imageRepository:
          description: The URL of the Deployment's image repository.
          example: https://my-image-repository
          type: string
        imageTag:
          description: The Deployment's custom image tag. Appears only if specified
            in the most recent deploy.
          example: my-image-tag
          type: string
        imageVersion:
          description: A tag that Astronomer applies to the Deployment's Astro Runtime
            image during a deploy. It includes the date and time of the deploy.
          example: deploy-2023-09-14T19-04
          type: string
        isCicdEnforced:
          description: Whether the Deployment requires that all deploys are made through
            CI/CD.
          example: true
          type: boolean
        isDagDeployEnabled:
          description: Whether the Deployment has DAG deploys enabled.
          example: true
          type: boolean
        isDevelopmentMode:
          description: If true, deployment will be able to use development-only features,
            such as hibernation, but will not have guaranteed uptime SLAs
          type: boolean
        isHighAvailability:
          description: Whether the Deployment has high availability (HA) enabled.
            If `true`, multiple scheduler Pods will run at once.
          example: true
          type: boolean
        name:
          description: The Deployment's name.
          example: My deployment
          type: string
        namespace:
          description: The Deployment's namespace name in the Kubernetes cluster.
          example: weightless-diameter-8927
          type: string
        oidcIssuerUrl:
          description: OIDC issuer URL of the deployment's cluster
          example: https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/
          type: string
        organizationId:
          description: The ID of the Organization to which the Deployment belongs.
          example: clmh59gt0000308lbgswe5fvh
          type: string
        region:
          description: The region of the cluster. Only for Dedicated and Hybrid Deployments.
          example: us-east-1
          type: string
        resourceQuotaCpu:
          description: The CPU quota for worker Pods when running the Kubernetes executor
            or KubernetesPodOperator. If current CPU usage across all workers exceeds
            the quota, no new worker Pods can be scheduled. Units are in number of
            CPU cores.
          example: "160"
          type: string
        resourceQuotaMemory:
          description: The memory quota for worker Pods when running the Kubernetes
            executor or KubernetesPodOperator. If current memory usage across all
            workers exceeds the quota, no new worker Pods can be scheduled. Units
            are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
          example: 320Gi
          type: string
        runtimeVersion:
          description: 'Deprecated: runtimeVersion has been replaced with astroRuntimeVersion'
          example: 9.1.0
          type: string
        scalingSpec:
          $ref: '#/components/schemas/DeploymentScalingSpec'
        scalingStatus:
          $ref: '#/components/schemas/DeploymentScalingStatus'
        schedulerAu:
          description: The number of Astronomer units (AU) for the Deployment's scheduler.
            Applies only to Deployments hosted on Hybrid clusters.
          example: 5
          type: integer
        schedulerCpu:
          description: The CPU limit for the Deployment's scheduler. Specified in
            number of CPU cores.
          example: "1"
          type: string
        schedulerMemory:
          description: The memory limit for the Deployment's scheduler. Units in Gibibytes
            or `Gi`.
          example: 1Gi
          type: string
        schedulerReplicas:
          description: The number of schedulers to use in the Deployment.
          example: 1
          type: integer
        schedulerSize:
          description: The Deployment's scheduler size.
          enum:
          - SMALL
          - MEDIUM
          - LARGE
          example: MEDIUM
          type: string
        status:
          description: The status of the Deployment.
          enum:
          - CREATING
          - DEPLOYING
          - HEALTHY
          - UNHEALTHY
          - UNKNOWN
          - HIBERNATING
          example: HEALTHY
          type: string
        statusReason:
          description: A message that provides context for the Deployment's status.
          example: Successfully Deployed
          type: string
        taskPodNodePoolId:
          description: The node pool ID for the task pod.
          example: clmh5mash000008mia6lnbs0f
          type: string
        type:
          description: The type of cluster that the Deployment runs on.
          enum:
          - DEDICATED
          - HYBRID
          - STANDARD
          example: DEDICATED
          type: string
        updatedAt:
          description: The time when the Deployment was last updated in UTC, formatted
            as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        updatedBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        webServerAirflowApiUrl:
          description: The Deployment's webserver's base url to directly access the
            Airflow api.
          example: myorganization.astronomer-dev.run/d8fe2wmv/api/v1
          type: string
        webServerCpu:
          description: The CPU limit for the Deployment's webserver. Units are in
            number of CPU cores.
          example: "0.5"
          type: string
        webServerIngressHostname:
          description: The Deployment's webserver's ingress hostname.
          example: clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv
          type: string
        webServerMemory:
          description: The memory limit for the Deployment's webserver. Units in Gibibytes
            or `Gi`.
          example: 0.5Gi
          type: string
        webServerReplicas:
          description: The number of webserver replicas.
          example: 1
          type: integer
        webServerUrl:
          description: The Deployment's webserver's url.
          example: myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5
          type: string
        workerQueues:
          description: A list of the Deployment's worker queues.
          items:
            $ref: '#/components/schemas/WorkerQueue'
          type: array
        workloadIdentity:
          description: The Deployment's workload identity.
          type: string
        workspaceId:
          description: The ID of the Workspace to which the Deployment belongs.
          example: clmh58o7d000108lb74ktc9o64
          type: string
        workspaceName:
          description: The name of the Workspace to which the Deployment belongs.
          example: my-workspace
          type: string
      required:
      - airflowVersion
      - astroRuntimeVersion
      - createdAt
      - createdBy
      - id
      - imageRepository
      - imageTag
      - isCicdEnforced
      - isDagDeployEnabled
      - name
      - namespace
      - organizationId
      - runtimeVersion
      - schedulerCpu
      - schedulerMemory
      - schedulerReplicas
      - status
      - updatedAt
      - updatedBy
      - webServerAirflowApiUrl
      - webServerCpu
      - webServerIngressHostname
      - webServerMemory
      - webServerUrl
      - workspaceId
      type: object
    DeploymentEnvironmentVariable:
      properties:
        isSecret:
          description: Whether the environment variable is a secret.
          example: true
          type: boolean
        key:
          description: The environment variable key, used to call the value in code.
          example: my-var
          type: string
        updatedAt:
          description: The time when the environment variable was last updated in
            UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          type: string
        value:
          description: The environment variable value.
          example: my-var-value
          type: string
      required:
      - isSecret
      - key
      - updatedAt
      type: object
    DeploymentEnvironmentVariableRequest:
      properties:
        isSecret:
          description: Whether the environment variable is a secret.
          example: false
          type: boolean
        key:
          description: The environment variable key, used to call the value in code.
          example: my-var
          type: string
        value:
          description: The environment variable value.
          example: my-var-value
          type: string
      required:
      - isSecret
      - key
      type: object
    DeploymentHibernationOverride:
      properties:
        isActive:
          description: Whether the override is currently active or not
          type: boolean
        isHibernating:
          description: Whether to go into hibernation or not via the override rule
          type: boolean
        overrideUntil:
          description: Timestamp till the override on the hibernation schedule is
            in effect
          format: date-time
          type: string
      type: object
    DeploymentHibernationOverrideRequest:
      properties:
        isHibernating:
          description: Whether to go into hibernation or not via the override rule
          type: boolean
        overrideUntil:
          description: Timestamp till the override on the hibernation schedule is
            in effect
          type: string
      type: object
    DeploymentHibernationSchedule:
      properties:
        description:
          description: A brief description of the schedule
          maxLength: 200
          type: string
        hibernateAtCron:
          description: A 5-part cron expression defining the times at which the deployment
            should hibernate
          type: string
        isEnabled:
          description: Toggle this schedule on or off. If set to false, this schedule
            will have no effect on hibernation.
          type: boolean
        wakeAtCron:
          description: A 5-part cron expression definingh the times at which the deployment
            should wake from hibernation
          type: string
      required:
      - hibernateAtCron
      - isEnabled
      - wakeAtCron
      type: object
    DeploymentHibernationSpec:
      properties:
        override:
          $ref: '#/components/schemas/DeploymentHibernationOverride'
        schedules:
          description: The list of schedules for deployment hibernation
          items:
            $ref: '#/components/schemas/DeploymentHibernationSchedule'
          type: array
      type: object
    DeploymentHibernationSpecRequest:
      properties:
        override:
          $ref: '#/components/schemas/DeploymentHibernationOverrideRequest'
        schedules:
          description: The list of schedules for deployment hibernation
          items:
            $ref: '#/components/schemas/DeploymentHibernationSchedule'
          maxItems: 10
          type: array
      type: object
    DeploymentHibernationStatus:
      properties:
        isHibernating:
          description: If the deployment is currently in hibernating state or not
          type: boolean
        nextEventAt:
          description: Timestamp of the next scheduled hibernation event for the deployment
          type: string
        nextEventType:
          description: The type of the next scheduled event for the deployment. Either
            HIBERNATE or WAKE
          enum:
          - HIBERNATE
          - WAKE
          type: string
        reason:
          description: Reason for the current hibernation state of the deployment
          type: string
      required:
      - isHibernating
      type: object
    DeploymentInstanceSpecRequest:
      properties:
        au:
          description: The number of Astro unit allocated to the Deployment pod. Minimum
            `5`, Maximum `24`.
          example: 5
          maximum: 24
          minimum: 5
          type: integer
        replicas:
          description: The number of replicas the pod should have. Minimum `1`, Maximum
            `4`.
          example: 1
          maximum: 4
          minimum: 1
          type: integer
      required:
      - au
      - replicas
      type: object
    DeploymentOptions:
      properties:
        executors:
          description: The available executors.
          items:
            type: string
          type: array
        resourceQuotas:
          $ref: '#/components/schemas/ResourceQuotaOptions'
        runtimeReleases:
          description: The available Astro Runtime versions.
          items:
            $ref: '#/components/schemas/RuntimeRelease'
          type: array
        schedulerMachines:
          description: The available scheduler sizes.
          items:
            $ref: '#/components/schemas/SchedulerMachine'
          type: array
        workerMachines:
          description: The available worker machine types.
          items:
            $ref: '#/components/schemas/WorkerMachine'
          type: array
        workerQueues:
          $ref: '#/components/schemas/WorkerQueueOptions'
        workloadIdentityOptions:
          description: The available workload identity options.
          items:
            $ref: '#/components/schemas/WorkloadIdentityOption'
          type: array
      required:
      - executors
      - resourceQuotas
      - runtimeReleases
      - schedulerMachines
      - workerMachines
      - workerQueues
      type: object
    DeploymentScalingSpec:
      properties:
        hibernationSpec:
          $ref: '#/components/schemas/DeploymentHibernationSpec'
      type: object
    DeploymentScalingSpecRequest:
      properties:
        hibernationSpec:
          $ref: '#/components/schemas/DeploymentHibernationSpecRequest'
      type: object
    DeploymentScalingStatus:
      properties:
        hibernationStatus:
          $ref: '#/components/schemas/DeploymentHibernationStatus'
      type: object
    DeploymentsPaginated:
      properties:
        deployments:
          description: A list of Deployments in the current page.
          items:
            $ref: '#/components/schemas/Deployment'
          type: array
        limit:
          description: The maximum number of Deployments in one page.
          example: 10
          type: integer
        offset:
          description: The offset of the current page of Deployments.
          example: 0
          type: integer
        totalCount:
          description: The total number of Deployments.
          example: 100
          type: integer
      required:
      - deployments
      - limit
      - offset
      - totalCount
      type: object
    DeploysPaginated:
      properties:
        deploys:
          description: A list of Deploys in the current page.
          items:
            $ref: '#/components/schemas/Deploy'
          type: array
        limit:
          description: The maximum number of Deploys in one page.
          type: integer
        offset:
          description: The offset of the current page of Deploys.
          type: integer
        totalCount:
          description: The total number of Deploys.
          type: integer
      required:
      - deploys
      - limit
      - offset
      - totalCount
      type: object
    Error:
      properties:
        message:
          type: string
        requestId:
          type: string
        statusCode:
          maximum: 600
          minimum: 400
          type: integer
      required:
      - message
      - requestId
      - statusCode
      type: object
    FinalizeDeployRequest:
      properties:
        dagTarballVersion:
          description: The Deploy's DAG tarball version, also known as the Bundle
            Version in the Astro UI. Required if DAG deploy is enabled on the deployment
            and deploy type is IMAGE_AND_DAG or DAG_ONLY
          type: string
      type: object
    HybridWorkerQueueRequest:
      properties:
        id:
          description: The worker queue's ID. If not provided, a new worker queue
            will be created.
          example: clmha1mzc000b08mi96n182au
          type: string
        isDefault:
          description: Whether the worker queue is the default worker queue on the
            Deployment.
          example: true
          type: boolean
        maxWorkerCount:
          description: The maximum number of workers that can run at once.
          minimum: 1
          type: integer
        minWorkerCount:
          description: The minimum number of workers running at once.
          minimum: 0
          type: integer
        name:
          description: The worker queue's name.
          example: My worker queue
          maxLength: 63
          type: string
        nodePoolId:
          description: The node pool ID associated with the worker queue.
          type: string
        workerConcurrency:
          description: The maximum number of concurrent tasks that a worker Pod can
            run at a time.
          minimum: 1
          type: integer
      required:
      - isDefault
      - maxWorkerCount
      - minWorkerCount
      - name
      - nodePoolId
      - workerConcurrency
      type: object
    MachineSpec:
      properties:
        concurrency:
          description: The maximum number of tasks that a given machine instance can
            run at once.
          example: 10
          type: number
        cpu:
          description: The CPU quantity. Units are in number of CPU cores.
          example: "1"
          type: string
        ephemeralStorage:
          description: The ephemeral storage quantity. Units in Gibibytes or `Gi`.
          example: 10Gi
          type: string
        memory:
          description: The memory quantity. Units in Gibibytes or `Gi`.
          example: 2Gi
          type: string
      required:
      - cpu
      - memory
      type: object
    ManagedDomain:
      properties:
        createdAt:
          description: The time when the domain was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.
          format: date-time
          type: string
        enforcedLogins:
          description: A list of login types that are enforced for users belonging
            to the domain.
          example:
          - password
          items:
            type: string
          type: array
        id:
          description: The managed domain's ID.
          example: cln203mz7000008jv0jyz9m3y
          type: string
        name:
          description: The managed domain's name/ URL.
          example: mycompany.com
          type: string
        organizationId:
          description: The ID of the Organization to which the managed domain belongs.
          example: cln204xr2000008mu3hhe3zwe
          type: string
        status:
          description: Whether the managed domain has completed the verification process.
          enum:
          - PENDING
          - VERIFIED
          type: string
        updatedAt:
          description: The time when the domain was last updated in UTC, formatted
            as `YYYY-MM-DDTHH:MM:SSZ`.
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - name
      - organizationId
      - status
      - updatedAt
      type: object
    NodePool:
      properties:
        cloudProvider:
          description: The name of the cloud provider.
          enum:
          - AWS
          - AZURE
          - GCP
          example: AWS
          type: string
        clusterId:
          description: The ID of the cluster that the node pool belongs to.
          example: clm891jb6000308jrc3vjdtde
          type: string
        createdAt:
          description: The time when the node pool was created in UTC, formatted as
            `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        id:
          description: The node pool's ID.
          example: clm890zhe000208jr39dd0ubs
          type: string
        isDefault:
          description: Whether the node pool is the default node pool of the cluster.
          example: true
          type: boolean
        maxNodeCount:
          description: The maximum number of nodes that can be created in the node
            pool.
          example: 1
          type: integer
        name:
          description: The name of the node pool.
          example: default
          type: string
        nodeInstanceType:
          description: The type of node instance that is used for the node pool.
          example: t3.medium
          type: string
        supportedAstroMachines:
          description: The list of supported Astro machines for the node pool. Returned
            only for Hosted dedicated clusters.
          example:
          - A5
          - A10
          items:
            type: string
          type: array
        updatedAt:
          description: The time when the node pool was last updated in UTC, formatted
            as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
      required:
      - cloudProvider
      - clusterId
      - createdAt
      - id
      - isDefault
      - maxNodeCount
      - name
      - nodeInstanceType
      - updatedAt
      type: object
    Organization:
      properties:
        billingEmail:
          description: The Organization's billing email.
          example: billing@company.com
          type: string
        createdAt:
          description: The time when the Organization was created in UTC, formatted
            as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        createdBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        id:
          description: The Organization's ID.
          example: clmaxoarx000008l2c5ayb9pt
          type: string
        isScimEnabled:
          description: Whether SCIM is enabled for the Organization.
          example: false
          type: boolean
        managedDomains:
          description: The list of managed domains configured in the Organization.
          items:
            $ref: '#/components/schemas/ManagedDomain'
          type: array
        name:
          description: The Organization's name.
          example: My organization
          type: string
        paymentMethod:
          description: The Organization's payment method.
          enum:
          - CREDIT_CARD
          - INVOICE
          - AWS_MARKETPLACE
          - AZURE_MARKETPLACE
          - GCP_MARKETPLACE
          example: CREDIT_CARD
          type: string
        product:
          description: The Organization's product type.
          enum:
          - HOSTED
          - HYBRID
          example: HOSTED
          type: string
        status:
          description: The Organization's status.
          enum:
          - ACTIVE
          - INACTIVE
          - SUSPENDED
          example: ACTIVE
          type: string
        supportPlan:
          description: The Organization's support plan.
          enum:
          - TRIAL
          - BASIC
          - STANDARD
          - PREMIUM
          - BUSINESS_CRITICAL
          example: BUSINESS_CRITICAL
          type: string
        trialExpiresAt:
          description: The time when the Organization's trial expires in UTC, formatted
            as `YYYY-MM-DDTHH:MM:SSZ`. Organizations that are no longer in Trial will
            not have a expiry date.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        updatedAt:
          description: The time when the Organization was last updated in UTC, formatted
            as `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        updatedBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
      required:
      - createdAt
      - createdBy
      - id
      - isScimEnabled
      - name
      - supportPlan
      - updatedAt
      - updatedBy
      type: object
    OrganizationsPaginated:
      properties:
        limit:
          description: The maximum number of Organizations in the page.
          example: 10
          type: integer
        offset:
          description: The offset of the Organizations in the page.
          example: 0
          type: integer
        organizations:
          description: The list of Organizations in the page.
          items:
            $ref: '#/components/schemas/Organization'
          type: array
        totalCount:
          description: The total number of Organizations.
          example: 100
          type: integer
      required:
      - limit
      - offset
      - organizations
      - totalCount
      type: object
    OverrideDeploymentHibernationBody:
      properties:
        isHibernating:
          description: The type of override to perform. Set this value to 'true' to
            have the Deployment hibernate regardless of its hibernation schedule.
            Set the value to 'false' to have the Deployment wake up regardless of
            its hibernation schedule. Use 'OverrideUntil' to define the length of
            the override.
          type: boolean
        overrideUntil:
          description: The end of the override time in UTC, formatted as 'YYYY-MM-DDTHH:MM:SSZ'.
            If this value isn't specified, the override persists until you end it
            through the Astro UI or another API call.
          format: date-time
          type: string
      required:
      - isHibernating
      type: object
    ProviderInstanceType:
      properties:
        cpu:
          description: The number of CPUs. Units are in number of CPU cores.
          example: 4
          type: integer
        memory:
          description: The amount of memory. Units in Gibibytes or `Gi`.
          example: 16Gi
          type: string
        name:
          description: The name of the instance type.
          example: e2-standard-4
          type: string
      required:
      - cpu
      - memory
      - name
      type: object
    ProviderRegion:
      properties:
        bannedInstances:
          description: The banned instances in the region.
          example:
          - t3.medium
          items:
            type: string
          type: array
        limited:
          description: Whether the region is limited.
          example: true
          type: boolean
        name:
          description: The name of the region.
          example: us-east-1
          type: string
      required:
      - name
      type: object
    Range:
      properties:
        ceiling:
          description: The maximum value.
          example: 10
          type: number
        default:
          description: The default value.
          example: 5
          type: number
        floor:
          description: The minimum value.
          example: 1
          type: number
      required:
      - ceiling
      - default
      - floor
      type: object
    ResourceOption:
      properties:
        cpu:
          $ref: '#/components/schemas/ResourceRange'
        memory:
          $ref: '#/components/schemas/ResourceRange'
      required:
      - cpu
      - memory
      type: object
    ResourceQuotaOptions:
      properties:
        defaultPodSize:
          $ref: '#/components/schemas/ResourceOption'
        resourceQuota:
          $ref: '#/components/schemas/ResourceOption'
      required:
      - defaultPodSize
      - resourceQuota
      type: object
    ResourceRange:
      properties:
        ceiling:
          description: The maximum value.
          example: "10"
          type: string
        default:
          description: The default value.
          example: "5"
          type: string
        floor:
          description: The minimum value.
          example: "1"
          type: string
      required:
      - ceiling
      - default
      - floor
      type: object
    RuntimeRelease:
      properties:
        airflowDatabaseMigration:
          description: Whether the release requires an Airflow database migration.
          example: false
          type: boolean
        airflowVersion:
          description: The Airflow version that the Runtime image is based on.
          example: 2.7.1
          type: string
        channel:
          description: The release channel.
          example: stable
          type: string
        releaseDate:
          description: The time when the version is released in UTC, formatted as
            `YYYY-MM-DDTHH:MM:SSZ`.
          example: "2022-11-22T04:37:12Z"
          format: date-time
          type: string
        stellarDatabaseMigration:
          description: Whether the release requires a Stellar database migration.
          example: false
          type: boolean
        version:
          description: The Astro Runtime version.
          example: 9.1.0
          type: string
      required:
      - airflowDatabaseMigration
      - airflowVersion
      - channel
      - releaseDate
      - stellarDatabaseMigration
      - version
      type: object
    SchedulerMachine:
      properties:
        name:
          description: The machine's name.
          enum:
          - SMALL
          - MEDIUM
          - LARGE
          type: string
        spec:
          $ref: '#/components/schemas/MachineSpec'
      required:
      - name
      - spec
      type: object
    UpdateClusterRequest:
      oneOf:
      - $ref: '#/components/schemas/UpdateDedicatedClusterRequest'
      - $ref: '#/components/schemas/UpdateHybridClusterRequest'
      type: object
    UpdateDedicatedClusterRequest:
      properties:
        clusterType:
          description: The cluster's type.
          enum:
          - DEDICATED
          example: DEDICATED
          type: string
        dbInstanceType:
          description: The cluster's database instance type. Required for Hybrid clusters.
          example: Small General Purpose
          type: string
        k8sTags:
          description: A list of Kubernetes tags to add to the cluster.
          items:
            $ref: '#/components/schemas/ClusterK8sTag'
          type: array
        name:
          description: The cluster's name.
          example: My cluster
          type: string
        nodePools:
          description: A list of node pools to add to the cluster. For Hybrid clusters
            only.
          items:
            $ref: '#/components/schemas/UpdateNodePoolRequest'
          type: array
        workspaceIds:
          description: The list of Workspaces that are authorized to the cluster.
            If this value is not provided, the existing list of Workspaces remains.
            If this value is '[]' then all workspace cluster mappings are removed.
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - k8sTags
      - name
      type: object
    UpdateDedicatedDeploymentRequest:
      properties:
        contactEmails:
          description: A list of contact emails for the Deployment.
          example:
          - user1@company.com
          items:
            type: string
          type: array
        defaultTaskPodCpu:
          description: The default CPU resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in number
            of CPU cores.
          example: "0.5"
          type: string
        defaultTaskPodMemory:
          description: The default memory resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in `Gi` and
            must be explicitly included. This value must always be twice the value
            of `DefaultTaskPodCpu`.
          example: 1Gi
          type: string
        description:
          description: The Deployment's description.
          example: My deployment description
          maxLength: 1000
          type: string
        environmentVariables:
          description: List of environment variables to add to the Deployment.
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariableRequest'
          type: array
        executor:
          description: The executor Deployment's executor.
          enum:
          - CELERY
          - KUBERNETES
          example: CELERY
          type: string
        isCicdEnforced:
          description: Whether the Deployment requires that all deploys are made through
            CI/CD.
          example: true
          type: boolean
        isDagDeployEnabled:
          description: Whether the Deployment has DAG deploys enabled.
          example: true
          type: boolean
        isDevelopmentMode:
          description: Whether the Deployment is for development only. If `false`,
            the Deployment can be considered production for the purposes of support
            case priority, but development-only features such as hibernation will
            not be available. You can't update this value to `true` for existing non-development
            Deployments.
          type: boolean
        isHighAvailability:
          description: Whether the Deployment is configured for high availability.
            If `true`, multiple scheduler pods will be online.
          example: true
          type: boolean
        name:
          description: The Deployment's name.
          example: My deployment
          maxLength: 500
          type: string
        resourceQuotaCpu:
          description: The CPU quota for worker Pods when running the Kubernetes executor
            or KubernetesPodOperator. If current CPU usage across all workers exceeds
            the quota, no new worker Pods can be scheduled. Units are in number of
            CPU cores.
          example: "160"
          type: string
        resourceQuotaMemory:
          description: The memory quota for worker Pods when running the Kubernetes
            executor or KubernetesPodOperator. If current memory usage across all
            workers exceeds the quota, no new worker Pods can be scheduled. Units
            are in `Gi` and must be explicitly included. This value must always be
            twice the value of `ResourceQuotaCpu`.
          example: 320Gi
          type: string
        scalingSpec:
          $ref: '#/components/schemas/DeploymentScalingSpecRequest'
        schedulerSize:
          description: The size of the scheduler pod.
          enum:
          - SMALL
          - MEDIUM
          - LARGE
          example: MEDIUM
          type: string
        type:
          description: The type of the Deployment.
          enum:
          - DEDICATED
          - HYBRID
          - STANDARD
          example: DEDICATED
          type: string
        workerQueues:
          description: A list of the Deployment's worker queues. Applies only when
            `Executor` is `CELERY`. All Deployments need at least 1 worker queue called
            `default`.
          items:
            $ref: '#/components/schemas/WorkerQueueRequest'
          minItems: 1
          type: array
        workloadIdentity:
          description: The Deployment's workload identity.
          example: arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0
          type: string
        workspaceId:
          description: The ID of the Workspace to which the Deployment belongs.
          example: clmh7vdf4000008lhhlnk9t6o
          type: string
      required:
      - defaultTaskPodCpu
      - defaultTaskPodMemory
      - environmentVariables
      - executor
      - isCicdEnforced
      - isDagDeployEnabled
      - isHighAvailability
      - name
      - resourceQuotaCpu
      - resourceQuotaMemory
      - schedulerSize
      - type
      - workspaceId
      type: object
    UpdateDeployRequest:
      properties:
        description:
          description: The Deploy's description.
          example: My deploy description
          maxLength: 500
          type: string
      type: object
    UpdateDeploymentRequest:
      oneOf:
      - $ref: '#/components/schemas/UpdateDedicatedDeploymentRequest'
      - $ref: '#/components/schemas/UpdateHybridDeploymentRequest'
      - $ref: '#/components/schemas/UpdateStandardDeploymentRequest'
      type: object
    UpdateHybridClusterRequest:
      properties:
        clusterType:
          description: The cluster's type.
          enum:
          - HYBRID
          example: HYBRID
          type: string
        workspaceIds:
          description: The list of Workspaces that are authorized to the cluster.
            If this value is not provided, the existing list of Workspaces remains.
            If this value is '[]' then all workspace cluster mappings are removed.
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - clusterType
      type: object
    UpdateHybridDeploymentRequest:
      properties:
        contactEmails:
          description: A list of contact emails for the Deployment.
          example:
          - user1@company.com
          items:
            type: string
          type: array
        description:
          description: The Deployment's description.
          example: My deployment description
          maxLength: 1000
          type: string
        environmentVariables:
          description: List of environment variables to add to the Deployment.
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariableRequest'
          type: array
        executor:
          description: The Deployment's executor type.
          enum:
          - CELERY
          - KUBERNETES
          example: CELERY
          type: string
        isCicdEnforced:
          description: Whether the Deployment requires that all deploys are made through
            CI/CD.
          example: true
          type: boolean
        isDagDeployEnabled:
          description: Whether the Deployment has DAG deploys enabled.
          example: true
          type: boolean
        name:
          description: The Deployment's name.
          example: My deployment
          maxLength: 500
          type: string
        scheduler:
          $ref: '#/components/schemas/DeploymentInstanceSpecRequest'
        taskPodNodePoolId:
          description: The node pool ID for worker Pods. Applies only when `Executor`
            is `KUBERNETES`.
          example: clmh87air000008mgfkgrg9fy
          type: string
        type:
          description: The type of the Deployment.
          enum:
          - DEDICATED
          - HYBRID
          - STANDARD
          example: DEDICATED
          type: string
        workerQueues:
          description: The list of worker queues configured for the Deployment. Applies
            only when `Executor` is `CELERY`. All Deployments need at least 1 worker
            queue called `default`.
          items:
            $ref: '#/components/schemas/HybridWorkerQueueRequest'
          minItems: 1
          type: array
        workloadIdentity:
          description: The Deployment's workload identity.
          example: arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0
          type: string
        workspaceId:
          description: The ID of the Workspace to which the Deployment belongs.
          example: clmh7vdf4000008lhhlnk9t6o
          type: string
      required:
      - environmentVariables
      - executor
      - isCicdEnforced
      - isDagDeployEnabled
      - name
      - scheduler
      - type
      - workspaceId
      type: object
    UpdateNodePoolRequest:
      properties:
        id:
          description: The node pool's ID.
          example: clm8bvk8b000008l9deowc5lx
          type: string
        isDefault:
          description: Whether the node pool is the default node pool of the cluster.
          example: true
          type: boolean
        maxNodeCount:
          description: The maximum number of nodes that can be created in the node
            pool.
          example: 10
          type: integer
        name:
          description: The name of the node pool.
          example: my-nodepool
          type: string
        nodeInstanceType:
          description: The type of node instance that is used for the node pool.
          example: t3.medium
          type: string
      required:
      - maxNodeCount
      - name
      - nodeInstanceType
      type: object
    UpdateOrganizationRequest:
      properties:
        billingEmail:
          description: The Organization's billing email.
          example: billing@company.com
          type: string
        isScimEnabled:
          description: Whether SCIM is enabled for the Organization.
          example: false
          type: boolean
        name:
          description: The name of the Organization.
          example: My Organization
          maxLength: 50
          type: string
      required:
      - billingEmail
      - isScimEnabled
      - name
      type: object
    UpdateStandardDeploymentRequest:
      properties:
        contactEmails:
          description: A list of contact emails for the Deployment.
          example:
          - user1@company.com
          items:
            type: string
          type: array
        defaultTaskPodCpu:
          description: The default CPU resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in number
            of CPU cores.
          example: "0.5"
          type: string
        defaultTaskPodMemory:
          description: The default memory resource usage for a worker Pod when running
            the Kubernetes executor or KubernetesPodOperator. Units are in `Gi` and
            must be explicitly included. This value must always be twice the value
            of `DefaultTaskPodCpu`.
          example: 1Gi
          type: string
        description:
          description: The Deployment's description.
          example: My deployment description
          maxLength: 1000
          type: string
        environmentVariables:
          description: List of environment variables to add to the Deployment.
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariableRequest'
          type: array
        executor:
          description: The executor Deployment's executor.
          enum:
          - CELERY
          - KUBERNETES
          example: CELERY
          type: string
        isCicdEnforced:
          description: Whether the Deployment requires that all deploys are made through
            CI/CD.
          example: true
          type: boolean
        isDagDeployEnabled:
          description: Whether the Deployment has DAG deploys enabled.
          example: true
          type: boolean
        isDevelopmentMode:
          description: Whether the Deployment is for development only. If `false`,
            the Deployment can be considered production for the purposes of support
            case priority, but development-only features such as hibernation will
            not be available. You can't update this value to `true` for existing non-development
            Deployments.
          type: boolean
        isHighAvailability:
          description: Whether the Deployment is configured for high availability.
            If `true`, multiple scheduler pods will be online.
          example: true
          type: boolean
        name:
          description: The Deployment's name.
          example: My deployment
          maxLength: 500
          type: string
        resourceQuotaCpu:
          description: The CPU quota for worker Pods when running the Kubernetes executor
            or KubernetesPodOperator. If current CPU usage across all workers exceeds
            the quota, no new worker Pods can be scheduled. Units are in number of
            CPU cores.
          example: "160"
          type: string
        resourceQuotaMemory:
          description: The memory quota for worker Pods when running the Kubernetes
            executor or KubernetesPodOperator. If current memory usage across all
            workers exceeds the quota, no new worker Pods can be scheduled. Units
            are in `Gi` and must be explicitly included. This value must always be
            twice the value of `ResourceQuotaCpu`.
          example: 320Gi
          type: string
        scalingSpec:
          $ref: '#/components/schemas/DeploymentScalingSpecRequest'
        schedulerSize:
          description: The size of the scheduler pod.
          enum:
          - SMALL
          - MEDIUM
          - LARGE
          example: MEDIUM
          type: string
        type:
          description: The type of the Deployment.
          enum:
          - DEDICATED
          - HYBRID
          - STANDARD
          example: DEDICATED
          type: string
        workerQueues:
          description: A list of the Deployment's worker queues. Applies only when
            `Executor` is `CELERY`. All Deployments need at least 1 worker queue called
            `default`.
          items:
            $ref: '#/components/schemas/WorkerQueueRequest'
          minItems: 1
          type: array
        workloadIdentity:
          description: The Deployment's workload identity.
          example: arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0
          type: string
        workspaceId:
          description: The ID of the Workspace to which the Deployment belongs.
          example: clmh7vdf4000008lhhlnk9t6o
          type: string
      required:
      - defaultTaskPodCpu
      - defaultTaskPodMemory
      - environmentVariables
      - executor
      - isCicdEnforced
      - isDagDeployEnabled
      - isHighAvailability
      - name
      - resourceQuotaCpu
      - resourceQuotaMemory
      - schedulerSize
      - type
      - workspaceId
      type: object
    UpdateWorkspaceRequest:
      properties:
        cicdEnforcedDefault:
          description: Whether new Deployments enforce CI/CD deploys by default.
          example: true
          type: boolean
        description:
          description: The Workspace's description.
          example: This is a test workspace
          type: string
        name:
          description: The Workspace's name.
          example: My Workspace
          maxLength: 50
          type: string
      required:
      - cicdEnforcedDefault
      - description
      - name
      type: object
    WorkerMachine:
      properties:
        concurrency:
          $ref: '#/components/schemas/Range'
        name:
          description: The machine's name.
          enum:
          - A5
          - A10
          - A20
          - A40
          - A60
          - A120
          - A160
          type: string
        spec:
          $ref: '#/components/schemas/MachineSpec'
      required:
      - concurrency
      - name
      - spec
      type: object
    WorkerQueue:
      properties:
        astroMachine:
          description: The Astro machine size for each worker node in the queue. For
            Astro Hosted only.
          example: A5
          type: string
        id:
          description: The worker queue's ID.
          example: clmh9vsuf000908midngba9mw
          type: string
        isDefault:
          description: Whether the worker queue is the default worker queue in the
            Deployment.
          example: true
          type: boolean
        maxWorkerCount:
          description: The maximum number of workers that can run at once.
          example: 10
          type: integer
        minWorkerCount:
          description: The minimum number of workers running at once.
          example: 1
          type: integer
        name:
          description: The worker queue's name.
          example: default
          type: string
        nodePoolId:
          description: The node pool ID associated with the worker queue.
          example: clmh9yjcn000a08mi8dsgbno9
          type: string
        podCpu:
          description: The maximum number of CPU units available for a worker node.
            Units are in number of CPU cores.
          example: "1"
          type: string
        podMemory:
          description: The maximum amount of memory available for a worker node. Units
            are in Gibibytes or `Gi`.
          example: 2Gi
          type: string
        workerConcurrency:
          description: The maximum number of concurrent tasks that a worker Pod can
            run at a time.
          example: 20
          type: integer
      required:
      - id
      - isDefault
      - maxWorkerCount
      - minWorkerCount
      - name
      - podCpu
      - podMemory
      - workerConcurrency
      type: object
    WorkerQueueOptions:
      properties:
        maxWorkers:
          $ref: '#/components/schemas/Range'
        minWorkers:
          $ref: '#/components/schemas/Range'
        workerConcurrency:
          $ref: '#/components/schemas/Range'
      required:
      - maxWorkers
      - minWorkers
      - workerConcurrency
      type: object
    WorkerQueueRequest:
      properties:
        astroMachine:
          description: The Astro machine for each worker in the queue. For Astro Hosted
            only.
          enum:
          - A5
          - A10
          - A20
          - A40
          - A60
          - A120
          - A160
          type: string
        id:
          description: The worker queue's ID. If not provided, a new worker queue
            will be created.
          example: clmha1mzc000b08mi96n182au
          type: string
        isDefault:
          description: Whether the worker queue is the default worker queue on the
            Deployment.
          example: true
          type: boolean
        maxWorkerCount:
          description: The maximum number of workers that can run at once.
          minimum: 1
          type: integer
        minWorkerCount:
          description: The minimum number of workers running at once.
          minimum: 0
          type: integer
        name:
          description: The worker queue's name.
          example: My worker queue
          maxLength: 63
          type: string
        workerConcurrency:
          description: The maximum number of concurrent tasks that a worker Pod can
            run at a time.
          minimum: 1
          type: integer
      required:
      - astroMachine
      - isDefault
      - maxWorkerCount
      - minWorkerCount
      - name
      - workerConcurrency
      type: object
    WorkloadIdentityOption:
      properties:
        label:
          description: The workload identity label.
          example: workload-label
          type: string
        role:
          description: The workload identity role.
          example: workload-role
          type: string
      required:
      - label
      - role
      type: object
    Workspace:
      properties:
        cicdEnforcedDefault:
          description: Whether CI/CD deploys are enforced by default.
          example: true
          type: boolean
        createdAt:
          description: The time when the Workspace was created in UTC, formatted as
            `YYYY-MM-DDTHH:MM:SSZ`
          example: "2023-09-08T12:00:00Z"
          format: date-time
          type: string
        createdBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        description:
          description: The Workspace's description.
          example: This is a test workspace
          type: string
        id:
          description: The Workspace's ID.
          example: clm8t5u4q000008jq4qoc3036
          type: string
        name:
          description: The Workspace's name.
          example: My Workspace
          type: string
        organizationId:
          description: The ID of the organization to which the workspace belongs.
          example: clm8t5u4q000008jq4qoc3036
          type: string
        organizationName:
          description: The name of the Organization to which the Workspace belongs.
          example: My Organization
          type: string
        updatedAt:
          description: The time when the Workspace was updated in UTC, formatted as
            `YYYY-MM-DDTHH:MM:SSZ`
          example: "2023-09-08T13:30:00Z"
          format: date-time
          type: string
        updatedBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
      required:
      - cicdEnforcedDefault
      - createdAt
      - id
      - name
      - organizationId
      - updatedAt
      type: object
    WorkspacesPaginated:
      properties:
        limit:
          description: The maximum number of workspaces that can be retrieved per
            page.
          example: 0
          type: integer
        offset:
          description: The offset for the current page of workspaces in the complete
            result.
          example: 0
          type: integer
        totalCount:
          description: The total number of Workspaces in the paginated result.
          example: 0
          type: integer
        workspaces:
          description: An array of Workspace objects representing a list of workspaces.
          items:
            $ref: '#/components/schemas/Workspace'
          type: array
      required:
      - limit
      - offset
      - totalCount
      - workspaces
      type: object
  securitySchemes:
    JWT:
      scheme: bearer
      type: http
info:
  contact: {}
  description: Astro Platform API
  title: Astro Platform API
  version: v1beta1
openapi: 3.0.3
paths:
  /organizations:
    get:
      description: List the details about all Organizations that you have access to.
        Requires using a personal access token (PAT) for authentication.
      operationId: ListOrganizations
      parameters:
      - description: Filters the Organization list by support plan.
        in: query
        name: supportPlan
        schema:
          enum:
          - TRIAL
          - BASIC
          - STANDARD
          - PREMIUM
          - BUSINESS_CRITICAL
          type: string
      - description: Filters the Organization list by product.
        in: query
        name: product
        schema:
          enum:
          - HOSTED
          - HYBRID
          type: string
      - description: The number of results to skip before returning values.
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        schema:
          default: 20
          maximum: 1000
          minimum: 0
          type: integer
      - description: A list of field names to sort by, and whether to show results
          as ascending or descending. Formatted as `<fieldName>:asc` or `<fieldName>:desc`.
        in: query
        name: sorts
        schema:
          items:
            enum:
            - name:asc
            - name:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List Organizations
      tags:
      - Organization
  /organizations/{organizationId}:
    get:
      description: Retrieve information about a specific Organization.
      operationId: GetOrganization
      parameters:
      - description: The Organization's ID.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: Whether to show only Organization metadata.
        in: query
        name: isLookUpOnly
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get an Organization
      tags:
      - Organization
      x-permission:
      - action: organization.get
    post:
      description: Update an Organization's details.
      operationId: UpdateOrganization
      parameters:
      - description: The Organization's ID.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
        description: The request body for updating the Organization.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update an Organization
      tags:
      - Organization
      x-permission:
      - action: organization.settings.update
  /organizations/{organizationId}/cluster-options:
    get:
      description: Get all possible options for configuring a cluster.
      operationId: GetClusterOptions
      parameters:
      - description: The ID of the Organization to get cluster options for.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The cluster's cloud provider.
        in: query
        name: provider
        schema:
          enum:
          - AWS
          - AZURE
          - GCP
          type: string
      - description: The cluster type.
        in: query
        name: type
        required: true
        schema:
          enum:
          - DEDICATED
          - HYBRID
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClusterOptions'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get cluster options
      tags:
      - Options
  /organizations/{organizationId}/clusters:
    get:
      description: List clusters in an Organization.
      operationId: ListClusters
      parameters:
      - description: The Organization's unique ID.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: A list of names for Clusters to filter by. The API returns details
          only for the specified Clusters.
        in: query
        name: names
        schema:
          items:
            type: string
          type: array
      - description: The cloud provider to list clusters for. Clusters from other
          providers will be filtered out of the results.
        in: query
        name: provider
        schema:
          enum:
          - AWS
          - AZURE
          - GCP
          type: string
      - description: The number of results to skip before returning values.
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        schema:
          default: 20
          maximum: 1000
          minimum: 0
          type: integer
      - description: A list of field names to sort by, and whether to show results
          as ascending or descending. Formatted as `<fieldName>:asc` or `<fieldName>:desc`.
        in: query
        name: sorts
        schema:
          items:
            enum:
            - name:asc
            - name:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClustersPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List clusters
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.get
    post:
      description: Create a cluster in the Organization. An Astro cluster is a Kubernetes
        cluster that hosts the infrastructure required to run Deployments.
      operationId: CreateCluster
      parameters:
      - description: The ID of the Organization to create the cluster in.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        description: The request body for creating a cluster
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create a cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.create
  /organizations/{organizationId}/clusters/{clusterId}:
    delete:
      description: Delete a cluster.
      operationId: DeleteCluster
      parameters:
      - description: The ID of the Organization to which the cluster belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The cluster's ID.
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete a cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.delete
    get:
      description: Retrieve details about a cluster.
      operationId: GetCluster
      parameters:
      - description: The ID of the Organization to which the cluster belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The cluster's ID.
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get a cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.get
    post:
      description: Update a cluster in the Organization.
      operationId: UpdateCluster
      parameters:
      - description: The ID of the Organization to which the cluster belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The cluster's ID
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterRequest'
        description: The request body for updating the cluster
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update a cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.update
  /organizations/{organizationId}/deployment-options:
    get:
      description: Get the options available for configuring a Deployment.
      operationId: GetDeploymentOptions
      parameters:
      - description: The ID of the Organization to retrieve Deployment options for.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The ID of a Deployment to retrieve options for.
        in: query
        name: deploymentId
        schema:
          type: string
      - description: The runtime type of the deployment.
        in: query
        name: deploymentType
        schema:
          enum:
          - HYBRID
          - DEDICATED
          - STANDARD
          type: string
      - description: The executor of the deployment.
        in: query
        name: executor
        schema:
          enum:
          - CELERY
          - KUBERNETES
          type: string
      - description: The cloud provider of the cluster for the deployment.
        in: query
        name: cloudProvider
        schema:
          enum:
          - AWS
          - AZURE
          - GCP
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentOptions'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get Deployment options
      tags:
      - Options
      x-permission:
      - action: organization.deploymentConfigurations.get
  /organizations/{organizationId}/deployments:
    get:
      description: List Deployments in an Organization.
      operationId: ListDeployments
      parameters:
      - description: The ID of the Organization to list Deployments for.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: A list of IDs for Deployments to show. The API returns details
          only for the specified Deployments.
        in: query
        name: deploymentIds
        schema:
          items:
            type: string
          type: array
      - description: A list of names for Deployments to filter by. The API returns
          details only for the specified Deployments.
        in: query
        name: names
        schema:
          items:
            type: string
          type: array
      - description: A list of IDs for Workspaces to filter on. The API returns details
          for all Deployments belonging only to the specified Workspaces.
        in: query
        name: workspaceIds
        schema:
          items:
            type: string
          type: array
      - description: The number of results to skip before returning values.
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: A list of field names to sort by, and whether to show results
          as ascending or descending. Formatted as `<fieldName>:asc` or `<fieldName>:desc`.
        in: query
        name: sorts
        schema:
          items:
            enum:
            - name:asc
            - name:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentsPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List Deployments
      tags:
      - Deployment
      x-permission:
      - action: organization.deployments.get
    post:
      description: Create a Deployment in the Organization. An Astro Deployment is
        an Airflow environment that is powered by all core Airflow components.
      operationId: CreateDeployment
      parameters:
      - description: The ID of the Organization in which to create the Deployment.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
        description: The request body for creating a Deployment.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create a Deployment
      tags:
      - Deployment
      x-permission:
      - action: workspace.deployments.create
  /organizations/{organizationId}/deployments/{deploymentId}:
    delete:
      description: Delete a Deployment from an Organization.
      operationId: DeleteDeployment
      parameters:
      - description: The ID of the Organization to which the Deployment belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete a Deployment
      tags:
      - Deployment
      x-permission:
      - action: deployment.delete
    get:
      description: Retrieve details about a Deployment.
      operationId: GetDeployment
      parameters:
      - description: The ID of the Organization to which the Deployment belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get a Deployment
      tags:
      - Deployment
      x-permission:
      - action: deployment.get
    post:
      description: Update a Deployment in the Organization.
      operationId: UpdateDeployment
      parameters:
      - description: The ID of the Organization to which the Deployment belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeploymentRequest'
        description: The request body for updating a Deployment.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update a Deployment
      tags:
      - Deployment
      x-permission:
      - action: deployment.update
  /organizations/{organizationId}/deployments/{deploymentId}/deploys:
    get:
      description: List deploys for a deployment
      operationId: ListDeploys
      parameters:
      - description: The ID of the Organization to which the Deployment belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: The number of results to skip before returning values.
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        schema:
          default: 20
          maximum: 1000
          minimum: 0
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploysPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List deploys for a deployment
      tags:
      - Deploy
      x-permission:
      - action: deployment.deploys.get
    post:
      description: Create a new Deploy. A Deploy represents an intent to deploy new
        DAG code to an Astro Deployment.
      operationId: CreateDeploy
      parameters:
      - description: The ID of the Organization in which to create the Deployment.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeployRequest'
        description: The Request body for creating a Deploy.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create a Deploy
      tags:
      - Deploy
      x-permission:
      - action: deployment.deploys.create
  /organizations/{organizationId}/deployments/{deploymentId}/deploys/{deployId}:
    get:
      description: Get a deploy for a deployment
      operationId: GetDeploy
      parameters:
      - description: The ID of the Organization in which to create the Deployment.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: The Deploy's ID.
        in: path
        name: deployId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get a deploy for a deployment
      tags:
      - Deploy
      x-permission:
      - action: deployment.deploys.get
    post:
      description: Update an existing Deploy. A Deploy represents an intent to deploy
        new DAG code to an Astro Deployment.
      operationId: UpdateDeploy
      parameters:
      - description: The ID of the Organization in which to create the Deployment.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: The Deploy's ID.
        in: path
        name: deployId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeployRequest'
        description: The Request body for updating a Deploy.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update a Deploy
      tags:
      - Deploy
      x-permission:
      - action: deployment.deploys.update
  /organizations/{organizationId}/deployments/{deploymentId}/deploys/{deployId}/finalize:
    post:
      description: Finalize deploy of a deployment
      operationId: FinalizeDeploy
      parameters:
      - description: The ID of the Organization in which to create the Deployment.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: The Deploy's ID.
        in: path
        name: deployId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinalizeDeployRequest'
        description: The Request body for finalizing a Deploy.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Finalize deploy of a deployment
      tags:
      - Deploy
      x-permission:
      - action: deployment.deploys.update
  /organizations/{organizationId}/deployments/{deploymentId}/deploys/{deployId}/rollback:
    post:
      description: Deploy rollback of a deployment
      operationId: DeployRollback
      parameters:
      - description: The ID of the Organization in which to create the Deployment.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment's ID.
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: The Deploy's ID.
        in: path
        name: deployId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployRollbackRequest'
        description: The Request body to rollback a Deploy.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deploy rollback of a deployment
      tags:
      - Deploy
      x-permission:
      - action: deployment.deploys.update
  /organizations/{organizationId}/deployments/{deploymentId}/hibernation-override:
    delete:
      operationId: DeleteDeploymentHibernationOverride
      parameters:
      - description: The Organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      responses:
        4XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: a common error response
        5XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: a common error response
        "204":
          description: No Content
      security:
      - JWT: []
      summary: Delete a hibernation override for a deployment
      tags:
      - Deployment
      x-permission:
      - action: deployment.update
    post:
      operationId: UpdateDeploymentHibernationOverride
      parameters:
      - description: The Organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverrideDeploymentHibernationBody'
        required: true
      responses:
        4XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: a common error response
        5XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: a common error response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentHibernationOverride'
          description: OK
      security:
      - JWT: []
      summary: Configure a hibernation override for a deployment
      tags:
      - Deployment
      x-permission:
      - action: deployment.update
  /organizations/{organizationId}/workspaces:
    get:
      description: List Workspaces in an Organization
      operationId: ListWorkspaces
      parameters:
      - description: The ID of the Organization to list Workspaces for.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: A list of IDs for specific Workspaces to list. The API will list
          information only for Workspaces which have been specified in this list.
        in: query
        name: workspaceIds
        schema:
          items:
            type: string
          type: array
      - description: A list of names for specific Workspaces to filter by. The API
          will list information only for Workspaces which have been specified in this
          list.
        in: query
        name: names
        schema:
          items:
            type: string
          type: array
      - description: The number of results to skip before returning values.
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        schema:
          default: 20
          maximum: 1000
          minimum: 0
          type: integer
      - description: A list of field names to sort by, and whether to show results
          as ascending or descending. Formatted as `<fieldName>:asc` or `<fieldName>:desc`.
        in: query
        name: sorts
        schema:
          items:
            enum:
            - name:asc
            - name:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspacesPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List Workspaces
      tags:
      - Workspace
      x-permission:
      - action: organization.workspaces.get
    post:
      description: Create a Workspace.
      operationId: CreateWorkspace
      parameters:
      - description: The ID of the Organization to which the Workspace will belong.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
        description: The request body for creating a new Workspace.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create Workspace
      tags:
      - Workspace
      x-permission:
      - action: organization.workspaces.create
  /organizations/{organizationId}/workspaces/{workspaceId}:
    delete:
      description: Delete a Workspace.
      operationId: DeleteWorkspace
      parameters:
      - description: The ID of the Organization to which the Workspace belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Workspace's ID.
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete Workspace
      tags:
      - Workspace
      x-permission:
      - action: workspace.delete
    get:
      description: Get information about a Workspace.
      operationId: GetWorkspace
      parameters:
      - description: The ID of the Organization to which the Workspace belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Workspace's ID.
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get Workspace
      tags:
      - Workspace
      x-permission:
      - action: workspace.get
    post:
      description: Update a Workspace.
      operationId: UpdateWorkspace
      parameters:
      - description: The ID of the Organization to which the Workspace belongs.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The Workspace's ID.
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
        description: The request body for updating a new Workspace.
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update Workspace
      tags:
      - Workspace
      x-permission:
      - action: workspace.settings.update
security:
- JWT: []
servers:
- url: https://api.astronomer.io/platform/v1beta1
tags:
- description: A `cluster` object represents an Astro cluster, which is a Kubernetes
    cluster that hosts the infrastructure required to run Deployments. Make requests
    to `cluster` endpoints to manage your standard and dedicated clusters. See [Create
    a dedicated cluster](https://docs.astronomer.io/astro/create-dedicated-cluster).
  name: Cluster
- description: The `organization` object contains the metadata and configurations
    of an Astro Organization. It does not include objects within the Organization,
    such as users and clusters. Make requests to `organization` endpoints to view
    and update high level settings for your Organization, including settings related
    to authentication and billing. To manage resources within an Organization, make
    requests to the endpoints related to those resources, such as `users`. See [Billing](https://docs.astronomer.io/astro/manage-billing),
    [Set up single sign-on](https://docs.astronomer.io/astro/configure-idp), and [Manage
    domains](https://docs.astronomer.io/astro/manage-domains).
  name: Organization
- description: The `options` object represents all possible configurations for a given
    Astro component. Make requests to the `options` object to get the configuration
    constraints for creating or updating a given Astro component.
  name: Options
- description: The `workspace` object represents an Astro Workspace, which is a collection
    of Deployments that can be accessed by a specific group of users. It contains
    metadata about a Workspace, but does not contain objects within the Workspace
    such as users and Deployments. Make requests to `workspace` endpoints to manage
    high level details about your Workspace. To manage resources within a Workspace,
    make requests to the endpoints related to those resources, such as `users`, and
    use the `workspaceIds` parameter to filter results by Workspace. See [Configure
    Workspaces](https://docs.astronomer.io/astro/manage-workspaces).
  name: Workspace
